%{

#include <iostream>
#include <fstream>
#include <string>
#include "../inc/assembler.hpp"

using namespace std;

extern int yylex();
extern int yyparse();
extern FILE* yyin;

Assembler* a;

void yyerror(string s);

%}

%union {
  char* sval;
  int ival;
}

%token PLUS COMMENT COMMA GLOBAL EXTERN SECTION SKIP WORD END HALT INT IRET CALL RET JMP JEQ JNE JGT PUSH POP
%token XCHG ADD SUB MUL DIV CMP NOT AND OR XOR TEST SHL SHR LDR STR NEW_LINE
%token R0 R1 R2 R3 R4 R5 SP PC PSW IMMED PC_REL MEM_VALUE OPEN_BRACKET
%token<sval> SYMBOL
%token<sval> LABEL
%token<sval> HEX_LITERAL
%token<sval> CLOSE_BRACKET
%token<ival> DEC_LITERAL

%start grammar

%%

grammar: 
	| line grammar
	| END grammar

line: NEW_LINE | label | label line | global_directive | extern_directive | section_directive | word_directive | skip_directive | no_param | jump_call | alu_instruction | mem_instruction | comment
;

symbol_list: SYMBOL {a->addSymbol($1);}
	| symbol_list COMMA SYMBOL {a->addSymbol($3);}
;

parameter_list: 
	SYMBOL {
		a->addSymbol($1);
		a->wordDirective(0, $1);
		}
	| DEC_LITERAL {a->wordDirective($1, "");}
	| HEX_LITERAL {
		int param = a->hexToInt($1);
		a->wordDirective(param, "");
		}
	| parameter_list COMMA SYMBOL {
		a->addSymbol($3);
		a->wordDirective(0, $3);
		}
	| parameter_list COMMA DEC_LITERAL {a->wordDirective($3, "");}
	| parameter_list COMMA HEX_LITERAL {
		int param = a->hexToInt($3);
		a->wordDirective(param, "");
		}
;

global_directive: GLOBAL {a->setVisibility("GLOBAL");}
	| global_directive SYMBOL {a->addSymbol($2);}
	| global_directive COMMA symbol_list 
;
	
extern_directive: EXTERN {a->setVisibility("EXTERN");}
	| extern_directive SYMBOL {a->addSymbol($2);}
	| extern_directive COMMA symbol_list
;
	
section_directive: SECTION        
	| section_directive SYMBOL {
		a->setSection($2);
		a->addSymbol($2);
		}
;

word_directive: WORD {
	a->setVisibility("UNDEFINED");
}
	| word_directive SYMBOL {
		a->addSymbol($2);
		a->wordDirective(0, $2);
	}
	| word_directive DEC_LITERAL {a->wordDirective($2, "");}
  | word_directive HEX_LITERAL {
		int param = a->hexToInt($2);
		a->wordDirective(param, "");
		}
	| word_directive COMMA parameter_list
;

skip_directive: SKIP
	| skip_directive DEC_LITERAL {
		a->skipDirective($2);
	}
	| skip_directive HEX_LITERAL	{
		int param = a->hexToInt($2);
		a->skipDirective(param);
		}
;

no_param: 
	HALT {
		a->haltInstruction();
	} 
	| IRET {
		a->iretInstruction();
	} 
	| RET {
		a->retInstruction();
	}
;

reg: R0 {a->reg0();}
	| R1 {a->reg1();}
	| R2 {a->reg2();}
	| R3 {a->reg3();}
	| R4 {a->reg4();}
	| R5 {a->reg5();}
	| SP {a->reg6();}
	| PC {a->reg7();}
	| PSW {a->reg8();}
;

operand_jump: 
  DEC_LITERAL {a->setMemAddr(immedDec_mem, $1, "");}
	| HEX_LITERAL {
		int arg = a->hexToInt($1);
		a->setMemAddr(immedHex_mem, arg, "");
	}
	| SYMBOL {
		a->addSymbol($1);
		a->setMemAddr(immedSym_mem, 0, $1);
	}
	| PC_REL SYMBOL {
		a->addSymbol($2);
		a->setMemAddr(pcSym_mem, 0, $2);
	}
	| MEM_VALUE DEC_LITERAL {a->setMemAddr(memDec_mem, $2, "");}
	| MEM_VALUE HEX_LITERAL {
		int arg = a->hexToInt($2);
		a->setMemAddr(memHex_mem, arg, "");
	}
	| MEM_VALUE SYMBOL {
		a->addSymbol($2);
		a->setMemAddr(memSym_mem, 0, $2);
	}
	| MEM_VALUE reg {a->setMemAddr(regdir_mem, 0, "");}
	| MEM_VALUE OPEN_BRACKET reg CLOSE_BRACKET {a->setMemAddr(regind_mem, 0, "");}
	| MEM_VALUE OPEN_BRACKET reg PLUS DEC_LITERAL CLOSE_BRACKET {a->setMemAddr(regindoffDec_mem, $5, "");}
	| MEM_VALUE OPEN_BRACKET reg PLUS HEX_LITERAL CLOSE_BRACKET {
		int arg = a->hexToInt($5);
		a->setMemAddr(regindoffHex_mem, arg, "");
	}
	| MEM_VALUE OPEN_BRACKET reg PLUS SYMBOL CLOSE_BRACKET {
		string s = $5;
		s.pop_back();
		a->addSymbol(s);
		a->setMemAddr(regindoffSym_mem, 0, s);
	}
;

jump_call: 
	CALL {
		a->setVisibility("UNDEFINED");
		a->callInstruction();
	}
	| JMP {
		a->setVisibility("UNDEFINED");
		a->jmpInstruction();
		}
	| JEQ {
		a->setVisibility("UNDEFINED");
		a->jeqInstruction();
		}
	| JNE {
		a->setVisibility("UNDEFINED");
		a->jneInstruction();
		}
	| JGT {
		a->setVisibility("UNDEFINED");
		a->jgtInstruction();
		}
  | jump_call operand_jump {a->executeInstruction();}
;

operand_mem:
  IMMED DEC_LITERAL {a->setDataAddr(immedDec, $2, "");}
  | IMMED HEX_LITERAL {
		int arg = a->hexToInt($2);
		a->setDataAddr(immedHex, arg, "");
		}
	| IMMED SYMBOL {
		a->addSymbol($2);
		a->setDataAddr(immedSym, 0, $2);
	}
	| DEC_LITERAL {a->setDataAddr(memDec, $1, "");}
	| HEX_LITERAL {
		int arg = a->hexToInt($1);
		a->setDataAddr(memHex, arg, "");
		}
	| SYMBOL {
		a->addSymbol($1);
		a->setDataAddr(memSym, 0, $1);
	}
	| PC_REL SYMBOL {
		a->addSymbol($2);
		a->setDataAddr(pcSym, 0, $2);
	}
	| reg {a->setDataAddr(regdir, 0, "");}
	| OPEN_BRACKET reg CLOSE_BRACKET {a->setDataAddr(regind, 0, "");}
	| OPEN_BRACKET reg PLUS DEC_LITERAL CLOSE_BRACKET {a->setDataAddr(regindoffDec, $4, "");}
	| OPEN_BRACKET reg PLUS HEX_LITERAL CLOSE_BRACKET {
		int arg = a->hexToInt($4);
		a->setDataAddr(regindoffHex, arg, "");
		}
	| OPEN_BRACKET reg PLUS SYMBOL CLOSE_BRACKET {
		string s = $4;
		s.pop_back();
		a->addSymbol(s);
		a->setDataAddr(regindoffSym, 0, s);
	}
;

alu_instruction: 
	INT {
		a->intInstruction();
	}
	| PUSH {
		a->pushInstruction();
	}
	| POP {
		a->popInstruction();
	} 
	| XCHG {
		a->xchgInstruction();
	} 
	| ADD {
		a->addInstruction();
	}  
	| SUB {
		a->subInstruction();
	}  
	| MUL {
		a->mulInstruction();
	}  
	| DIV {
		a->divInstruction();
	} 
	| CMP {
		a->cmpInstruction();
	} 
	| NOT {
		a->notInstruction();
	}  
	| AND {
		a->andInstruction();
	}  
	| OR {
		a->orInstruction();
	} 
	| XOR {
		a->xorInstruction();
	} 
	| TEST {
		a->testInstruction();
	} 
	| SHL {
		a->shlInstruction();
	} 
	| SHR {
		a->shrInstruction();
	} 
  | alu_instruction reg {
		if(a->cur_ins == INT_INS || a->cur_ins == PUSH_INS || a->cur_ins == POP_INS || a->cur_ins == NOT_INS){
			a->executeInstruction();
		}
	}
	| alu_instruction reg COMMA reg {a->executeInstruction();}
;

mem_instruction: LDR {
	a->setVisibility("UNDEFINED");
	a->ldrInstruction();
	}
	| STR {
		a->setVisibility("UNDEFINED");
		a->strInstruction();
		}
  | mem_instruction reg COMMA operand_mem {a->executeInstruction();}
	
comment: COMMENT
;

label: LABEL {
	a->setVisibility("LOCAL");
	a->addSymbol($1);
	}
;

%%

int pmain(Assembler* as, string input){
  string filename(input);

	a = as;

  yyin = fopen(filename.c_str(), "r");

	if(!yyin){
		cout << "Error!" << endl;
	}

  int r;

	do {

    while((r = yyparse())){
      if(r == 2) continue;
    }
	} while(!feof(yyin));
  
	return 0;
}

void yyerror(string s) {
	cout << "Error!";
	exit(1);
}